{% extends 'base.html.twig' %}

{% block title %}Paiement{% endblock %}

{% block body %}
    <div class="container">
        <div class="p-4 p-md-5 mb-4 mt-5 text-white text-center rounded bg-dark">
            <div class="">
                <h1 class="display-4">Paiement de la commande</h1>
            </div>
        </div>
        <div class="row">
            <div class="col"></div>
            <div class="col-4">
                <form id="payment-form">
                    <div id="payment-element">
                        <!--Stripe.js injects the Payment Element-->
                    </div>
                    <button id="submit">
                        <div class="spinner hidden" id="spinner"></div>
                        <span id="button-text">Pay now</span>
                    </button>
                    <div id="payment-message" class="hidden"></div>
                </form>
            </div>
            <div class="col"></div>
        </div>


        <a href="{{ path('app_succes') }}">Valider Commande</a>
    </div>


<script>
    let stripe = Stripe('pk_test_kS0rmIfa9J2q2GTcM92ajHil00yEjRKGO9');

    const appearance = {
        theme: 'night',
        variables: {
            fontFamily: 'Sohne, system-ui, sans-serif',
            fontWeightNormal: '500',
            borderRadius: '8px',
            colorBackground: '#0A2540',
            colorPrimary: '#EFC078',
            colorPrimaryText: '#1A1B25',
            colorText: 'white',
            colorTextSecondary: 'white',
            colorTextPlaceholder: '#727F96',
            colorIconTab: 'white',
            colorLogo: 'dark'
        },
        rules: {
            '.Input, .Block': {
                backgroundColor: 'transparent',
                border: '1.5px solid var(--colorPrimary)'
            }
        }
    };



    const options = {
        clientSecret: '{{ secret }}',
        // Fully customizable with appearance API.
        appearance: {theme: 'stripe',
            },


    };



    // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 2
    const elements = stripe.elements(options);

    // Create and mount the Payment Element
    const paymentElement = elements.create('payment');
    paymentElement.mount('#payment-element');


    const form = document.getElementById('payment-form');

    form.addEventListener('submit', async (event) => {
        event.preventDefault();

        const {error} = await stripe.confirmPayment({
            //`Elements` instance that was used to create the Payment Element
            elements,
            confirmParams: {
                return_url:   window.location = '{{ path('app_succes') }}',
            },
        });

        if (error) {
            // This point will only be reached if there is an immediate error when
            // confirming the payment. Show error to your customer (for example, payment
            // details incomplete)
            const messageContainer = document.querySelector('#error-message');
            messageContainer.textContent = error.message;
        } else {


            // Your customer will be redirected to your `return_url`. For some payment
            // methods like iDEAL, your customer will be redirected to an intermediate
            // site first to authorize the payment, then redirected to the `return_url`.
        }
    });

  //  let elements = stripe.elements({
   //     clientSecret: '{{ secret }}',
        appearance
  //  });


   // let paymentElement = elements.create('payment');
 //   let card = elements.create('card');
  //  card.mount("#payment-element")

    // On gere la saisie
    paymentElement.addEventListener("change", (event) => {
        let displayError = document.getElementById("error-message")
        if (event.error){
            displayError.textContent = event.error.message;
        }else {
            displayError.textContent = "";
        }

    })




</script>

{% endblock %}